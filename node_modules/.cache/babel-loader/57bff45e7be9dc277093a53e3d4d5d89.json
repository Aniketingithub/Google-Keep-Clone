{"ast":null,"code":"import _toConsumableArray from\"/home/aniket/conversational-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"/home/aniket/conversational-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/aniket/conversational-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/home/aniket/conversational-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/aniket/conversational-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/aniket/conversational-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/aniket/conversational-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";import\"./App.css\";import\"@progress/kendo-theme-default/dist/all.css\";import{Chat}from\"@progress/kendo-react-conversational-ui\";import{StreamChat}from\"stream-chat\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var App=/*#__PURE__*/function(_React$Component){_inherits(App,_React$Component);var _super=_createSuper(App);function App(props){var _this;_classCallCheck(this,App);_this=_super.call(this,props);_this.initialiseChatClient=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,streamServerInfo;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"http://localhost:8080/v1/token\",{method:\"POST\",mode:\"cors\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({id:_this.user.id,name:_this.user.name})});case 2:response=_context.sent;_context.next=5;return response.json();case 5:streamServerInfo=_context.sent;_this.chatClient=new StreamChat(streamServerInfo.apiKey);_this.chatClient.connectUser(_this.user,streamServerInfo.token);_this.conversation=_this.chatClient.channel(\"commerce\",\"conversational-ui\");_context.next=11;return _this.conversation.watch();case 11:_this.conversation.on(\"message.new\",_this.onNewMessage);case 12:case\"end\":return _context.stop();}}},_callee);}));_this.addMessage=function(_ref2){var message=_ref2.message;if(!_this.user){_this.user={name:message.text,id:Date.now().toString()};var newMessage=Object.assign({},message);newMessage.text=\"Welcome to the chat \".concat(message.text,\"!\");newMessage.author=_this.bot;_this.setState({messages:[].concat(_toConsumableArray(_this.state.messages),[newMessage])});_this.initialiseChatClient();}else{_this.conversation.sendMessage({text:message.text});}};_this.onNewMessage=function(event){var message={text:event.message.text,author:event.message.user,timestamp:event.message.created_at};_this.setState({messages:[].concat(_toConsumableArray(_this.state.messages),[message])});};_this.user=undefined;_this.bot={id:\"0\",name:\"bot\"};_this.state={messages:[{author:_this.bot,timestamp:new Date(),text:\"Hello! Please enter a name in order to start a chat\"}]};return _this;}_createClass(App,[{key:\"render\",value:function render(){return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Conversational UI\"}),/*#__PURE__*/_jsx(Chat,{user:this.user,messages:this.state.messages,onMessageSend:this.addMessage,placeholder:\"Type here...\",width:400})]});}}]);return App;}(React.Component);export default App;","map":{"version":3,"sources":["/home/aniket/conversational-ui/src/App.js"],"names":["React","Chat","StreamChat","App","props","initialiseChatClient","fetch","method","mode","headers","body","JSON","stringify","id","user","name","response","json","streamServerInfo","chatClient","apiKey","connectUser","token","conversation","channel","watch","on","onNewMessage","addMessage","message","text","Date","now","toString","newMessage","Object","assign","author","bot","setState","messages","state","sendMessage","event","timestamp","created_at","undefined","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport \"@progress/kendo-theme-default/dist/all.css\";\nimport { Chat } from \"@progress/kendo-react-conversational-ui\";\nimport { StreamChat } from \"stream-chat\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.user = undefined;\n    this.bot = { id: \"0\", name: \"bot\" };\n\n    this.state = {\n      messages: [\n        {\n          author: this.bot,\n          timestamp: new Date(),\n          text: \"Hello! Please enter a name in order to start a chat\"\n        }\n      ]\n    };\n  }\n\n  initialiseChatClient = async () => {\n    const response = await fetch(\"http://localhost:8080/v1/token\", {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        id: this.user.id,\n        name: this.user.name\n      })\n    });\n    const streamServerInfo = await response.json();\n\n    this.chatClient = new StreamChat(streamServerInfo.apiKey);\n    this.chatClient.connectUser(this.user, streamServerInfo.token);\n\n    this.conversation = this.chatClient.channel(\n      \"commerce\",\n      \"conversational-ui\"\n    );\n\n    await this.conversation.watch();\n    this.conversation.on(\"message.new\", this.onNewMessage);\n  };\n\n  addMessage = ({ message }) => {\n    if (!this.user) {\n      this.user = { name: message.text, id: Date.now().toString() };\n\n      let newMessage = Object.assign({}, message);\n      newMessage.text = `Welcome to the chat ${message.text}!`;\n      newMessage.author = this.bot;\n\n      this.setState({\n        messages: [...this.state.messages, newMessage]\n      });\n\n      this.initialiseChatClient();\n    } else {\n      this.conversation.sendMessage({ text: message.text });\n    }\n  };\n\n  onNewMessage = event => {\n    let message = {\n      text: event.message.text,\n      author: event.message.user,\n      timestamp: event.message.created_at\n    };\n\n    this.setState({\n      messages: [...this.state.messages, message]\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Conversational UI</h1>\n        <Chat\n          user={this.user}\n          messages={this.state.messages}\n          onMessageSend={this.addMessage}\n          placeholder={\"Type here...\"}\n          width={400}\n        ></Chat>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}