{"ast":null,"code":"var _jsxFileName = \"/home/aniket/conversational-ui/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport \"@progress/kendo-theme-default/dist/all.css\";\nimport { Chat } from \"@progress/kendo-react-conversational-ui\";\nimport { StreamChat } from \"stream-chat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.initialiseChatClient = async () => {\n      const response = await fetch(\"http://localhost:8080/v1/token\", {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          id: this.user.id,\n          name: this.user.name\n        })\n      });\n      const streamServerInfo = await response.json();\n      this.chatClient = new StreamChat(streamServerInfo.apiKey);\n      this.chatClient.connectUser(this.user, streamServerInfo.secretKey);\n      this.conversation = this.chatClient.channel(\"commerce\", \"conversational-ui\");\n      await this.conversation.watch();\n      this.conversation.on(\"message.new\", this.onNewMessage);\n    };\n\n    this.addMessage = ({\n      message\n    }) => {\n      if (!this.user) {\n        this.user = {\n          name: message.text,\n          id: Date.now().toString()\n        };\n        let newMessage = Object.assign({}, message);\n        newMessage.text = `Welcome to the chat ${message.text}!`;\n        newMessage.author = this.bot;\n        this.setState({\n          messages: [...this.state.messages, newMessage]\n        });\n        this.initialiseChatClient();\n      } else {\n        this.conversation.sendMessage({\n          text: message.text\n        });\n      }\n    };\n\n    this.onNewMessage = event => {\n      let message = {\n        text: event.message.text,\n        author: event.message.user,\n        timestamp: event.message.created_at\n      };\n      this.setState({\n        messages: [...this.state.messages, message]\n      });\n    };\n\n    this.user = undefined;\n    this.bot = {\n      id: \"0\",\n      name: \"bot\"\n    };\n    this.state = {\n      messages: [{\n        author: this.bot,\n        timestamp: new Date(),\n        text: \"Hello! Please enter a name in order to start a chat\"\n      }]\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Conversational UI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chat, {\n        user: this.user,\n        messages: this.state.messages,\n        onMessageSend: this.addMessage,\n        placeholder: \"Type here...\",\n        width: 400\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/aniket/conversational-ui/src/App.js"],"names":["React","Chat","StreamChat","App","Component","constructor","props","initialiseChatClient","response","fetch","method","mode","headers","body","JSON","stringify","id","user","name","streamServerInfo","json","chatClient","apiKey","connectUser","secretKey","conversation","channel","watch","on","onNewMessage","addMessage","message","text","Date","now","toString","newMessage","Object","assign","author","bot","setState","messages","state","sendMessage","event","timestamp","created_at","undefined","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport \"@progress/kendo-theme-default/dist/all.css\";\nimport { Chat } from \"@progress/kendo-react-conversational-ui\";\nimport { StreamChat } from \"stream-chat\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.user = undefined;\n    this.bot = { id: \"0\", name: \"bot\" };\n\n    this.state = {\n      messages: [\n        {\n          author: this.bot,\n          timestamp: new Date(),\n          text: \"Hello! Please enter a name in order to start a chat\"\n        }\n      ]\n    };\n  }\n\n  initialiseChatClient = async () => {\n    const response = await fetch(\"http://localhost:8080/v1/token\", {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        id: this.user.id,\n        name: this.user.name\n      })\n    });\n    const streamServerInfo = await response.json();\n\n    this.chatClient = new StreamChat(streamServerInfo.apiKey);\n    this.chatClient.connectUser(this.user, streamServerInfo.secretKey);\n\n    this.conversation = this.chatClient.channel(\n      \"commerce\",\n      \"conversational-ui\"\n    );\n\n    await this.conversation.watch();\n    this.conversation.on(\"message.new\", this.onNewMessage);\n  };\n\n  addMessage = ({ message }) => {\n    if (!this.user) {\n      this.user = { name: message.text, id: Date.now().toString() };\n\n      let newMessage = Object.assign({}, message);\n      newMessage.text = `Welcome to the chat ${message.text}!`;\n      newMessage.author = this.bot;\n\n      this.setState({\n        messages: [...this.state.messages, newMessage]\n      });\n\n      this.initialiseChatClient();\n    } else {\n      this.conversation.sendMessage({ text: message.text });\n    }\n  };\n\n  onNewMessage = event => {\n    let message = {\n      text: event.message.text,\n      author: event.message.user,\n      timestamp: event.message.created_at\n    };\n\n    this.setState({\n      messages: [...this.state.messages, message]\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Conversational UI</h1>\n        <Chat\n          user={this.user}\n          messages={this.state.messages}\n          onMessageSend={this.addMessage}\n          placeholder={\"Type here...\"}\n          width={400}\n        ></Chat>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}